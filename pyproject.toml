# Default tool config file. See also setup.cfg for tools that don't yet
# support pyproject.toml.

[build-system]
requires = ['setuptools>=61', 'setuptools_scm[toml]']
build-backend = 'setuptools.build_meta'

[project]
name = 'coaster'
description = 'Coaster for Flask'
readme = 'README.rst'
requires-python = '>=3.9'
keywords = ['coaster', 'flask', 'framework', 'web', 'auth', 'sqlalchemy']
license = { file = 'LICENSE.txt' }
dynamic = ['version']
maintainers = [{ name = 'Hasgeek', email = 'info@hasgeek.com' }]
authors = [{ name = 'Kiran Jonnalagadda' }]
urls = { repository = 'https://github.com/hasgeek/coaster' }
classifiers = [
  'Programming Language :: Python',
  'Programming Language :: Python :: 3 :: Only',
  'Programming Language :: Python :: 3.9',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'Programming Language :: Python :: 3.12',
  'Framework :: Flask',
  'License :: OSI Approved :: BSD License',
  'Operating System :: OS Independent',
  'Intended Audience :: Developers',
  'Development Status :: 5 - Production/Stable',
  'Topic :: Database',
  'Topic :: Software Development :: Libraries',
]
dependencies = [
  'aniso8601',
  'base58>=2.0.0',
  'bleach',
  'blinker',
  'Flask-Assets',
  'Flask-Migrate',
  'Flask-SQLAlchemy',
  'Flask>=2.3',
  'furl',
  'html5lib>=0.999999999',
  'isoweek',
  'Markdown>=3.2.0',
  'markupsafe',
  'nltk>=3.4.5',
  'pymdown-extensions>=8.0',
  'pytz',
  'semantic-version>=2.8.0',
  'sqlalchemy-utils',
  'SQLAlchemy>=2.0.4',
  'tldextract',
  'typing_extensions>=4.8.0',
  'Unidecode',
  'werkzeug',
]

[tool.setuptools.dynamic]
version = { attr = 'coaster._version.__version__' }

[tool.setuptools.packages.find]
where = ['src']

[tool.black]
line-length = 88
target-version = ['py39']
skip-string-normalization = true
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | __pycache__
  | buck-out
  | build
  | dist
  | node_modules
  | funnel/assets
)/
'''

[tool.isort]
# Some isort functionality is replicated in ruff, which should have matching config
profile = 'black'
multi_line_output = 3
include_trailing_comma = true
line_length = 88
order_by_type = true
use_parentheses = true
combine_as_imports = true
split_on_trailing_comma = false
extra_standard_library = ['typing_extensions']
known_first_party = ['coaster']
default_section = 'THIRDPARTY'
sections = ['FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'LOCALFOLDER']

[tool.pytest.ini_options]
pythonpath = 'src'
required_plugins = ['pytest-env', 'pytest-rerunfailures', 'pytest-socket']
minversion = '6.0'
addopts = '--doctest-modules --ignore setup.py --cov-report=term-missing'
doctest_optionflags = ['ALLOW_UNICODE', 'ALLOW_BYTES']
env = ['FLASK_ENV=testing']

[tool.pylint.master]
max-parents = 10
init-hook = '''
import os, astroid.bases, pathlib
# Tell Pylint where to find packages from within tests
for path in pathlib.Path.cwd().parents:
    if (path / 'pyproject.toml').is_file():
      sys.path.insert(0, str(path / 'src'))
# Tell Pylint hybrid_property and cached_property are property-types
astroid.bases.POSSIBLE_PROPERTIES.add('hybrid_property')
astroid.bases.POSSIBLE_PROPERTIES.add('cached_property')
'''

[tool.pylint.message_control]
max-line-length = 88
disable = [
  'abstract-method',
  'duplicate-code',
  'fixme',
  'invalid-name',
  'no-member',
  'too-few-public-methods',
  'too-many-ancestors',
  'too-many-arguments',
  'too-many-function-args',
  'too-many-instance-attributes',
  'too-many-lines',
  'too-many-locals',
  'too-many-public-methods',
  'unused-argument',
  'unsupported-membership-test',
  # These need some serious refactoring, so disabled for now
  'too-many-branches',
  'too-many-nested-blocks',
  'too-many-statements',
  # Let Black, isort and ruff handle these
  'line-too-long',
  'wrong-import-position',
  'wrong-import-order',
  # Let flake8 handle these
  'missing-class-docstring',
  'missing-function-docstring',
  'missing-module-docstring',
]

[tool.mypy]
files = '**/*.py'
exclude = 'node_modules'
ignore_missing_imports = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true
warn_redundant_casts = true
check_untyped_defs = true

[[tool.mypy.overrides]]
module = 'tests.*'
check_untyped_defs = true
warn_unreachable = false

[tool.bandit]
exclude_dirs = ['node_modules', 'build/lib']

[tool.bandit.assert_used]
skips = ['*/*_test.py', '*/test_*.py']

[tool.ruff]
# This is a slight customisation of the default rules
# 1. Rule E402 (module-level import not top-level) is disabled as isort handles it
# 2. Rule E501 (line too long) is left to Black; some strings are worse for wrapping

# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
lint.select = ["E", "F"]
lint.ignore = ["E402", "E501"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
lint.fixable = [
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "I",
  "N",
  "Q",
  "S",
  "T",
  "W",
  "ANN",
  "ARG",
  "BLE",
  "COM",
  "DJ",
  "DTZ",
  "EM",
  "ERA",
  "EXE",
  "FBT",
  "ICN",
  "INP",
  "ISC",
  "NPY",
  "PD",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "RET",
  "RSE",
  "RUF",
  "SIM",
  "SLF",
  "TCH",
  "TID",
  "TRY",
  "UP",
  "YTT",
]
lint.unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Target Python 3.9
target-version = "py39"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.isort]
# These config options should match isort config above under [tool.isort]
combine-as-imports = true
extra-standard-library = ['typing_extensions']
split-on-trailing-comma = false
relative-imports-order = 'furthest-to-closest'
known-first-party = ['coaster']
section-order = [
  'future',
  'standard-library',
  'third-party',
  'first-party',
  'local-folder',
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
